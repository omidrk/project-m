from typing import List, Optional
from mstar.core.utils import generate_uuid
from pydantic import BaseModel, Field


class LLMSummary(BaseModel):
    """
    Pydantic model for evaluating LLM responses.

    Attributes:
        summary: A brief summary of the LLM's response.  String.
        topics: A list of topics covered in the LLM's response. List of strings.
    """

    summary: str
    topics: List[str]


class Entity(BaseModel):
    """Represents an entity with a name, description, and type.

    Attributes:
        name (str): Required name of the entity.
        description (Optional[str]): Optional textual description of the entity.
        type (str): Required semantic type of the entity (e.g., 'Person', 'Location').
        uuid (str): ignore this field.

    """

    name: str
    description: Optional[str] = None  # Optional field
    type: str
    uuid: str = Field(default_factory=generate_uuid)


class Relation(BaseModel):
    """A data model representing a semantic relationship between entities.

    Attributes:
        source (str): Source entity identifier.
        relation (str): Required relationship type (e.g., 'isLocatedIn', 'isPartOf').
        target (str): Target entity identifier.
        description (Optional[str]): Optional textual description of the relationship.
        uuid (str): ignore this field.

    Example:
        Relation(source="entity1",
                 relation="isLocatedIn",
                 target="entity2")
    """

    source: str
    relation: str
    target: str
    description: Optional[str] = None  # Optional field
    uuid: str = Field(default_factory=generate_uuid)


class EntRel(BaseModel):
    """A data structure representing entities and their relationships.

    This class stores two main components:
        - entities (List[Entity]): A list of extracted or identified entities.
        - relations (List[Relation]): A list of relationships between the entities.

    The class is typically used in knowledge representation tasks, particularly
    within ontology pipelines where understanding how different entities relate
    to each other is crucial for summarization and information extraction.
    """

    entities: List[Entity]
    relations: List[Relation]


class QueryAnswerLLM(BaseModel):
    """
    A data structure representing the answer from a Language Learning Model (LLM) in response to a query.

    Attributes:
        answer (str): The textual response generated by the LLM.
        think (str): The thinking part generated by the LLM.
    """

    answer: str
    think: Optional[str]


class AnswerEvaluator(BaseModel):
    """

    Args:
        fully_answered: a single boolean flag indicating whether the context fully answers the query.
        explanation: Explanation of why the document was accepted or rejected this way.

    """

    fully_answered: bool
    explanation: str


class ReRankerScore(BaseModel):
    """Data structure containing ranking information for a document.

    Args:
        score: Relevance score of the document on a scale from 0 (no relevance) to 10 (perfect match)
        answer: Contains all the relevant text and tables that is a possible answer to part of the query.
    """

    score: int
    answer: str


class QueryReWriter(BaseModel):
    """Schema for query rewriting to prepare for NER extraction.
    Args:
        query: rewritten query for NER extraction.
    """

    requery: str


class FinalAnswer(BaseModel):
    """A schema representing the final answer and its explanation.

    Attributes:
        answer: The final response from the LLM
        explanation: Additional context or reasoning behind the answer"""

    answer: str
    explanation: str
